syntax = "proto3";

// This is NOT a stable API
package ocfl.v0;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/srerickson/ocfl-index/gen/ocfl/v0;ocflv0";

service IndexService {
  // Basic info on the storage root & index status.
  rpc GetSummary(GetSummaryRequest) returns (GetSummaryResponse) {}
  
  // OCFL Objects in the index
  rpc ListObjects(ListObjectsRequest) returns (ListObjectsResponse) {}
  
  // Details on a specific OCFL object in the index 
  rpc GetObject(GetObjectRequest) returns (GetObjectResponse) {}
  
  // Query the logical state of an OCFL object version
  rpc GetObjectState(GetObjectStateRequest) returns (GetObjectStateResponse) {}

  // Download byte stream for content (based on digest)
  rpc GetContent(GetContentRequest) returns (stream GetContentResponse){}
}

message GetSummaryRequest {}

message GetSummaryResponse {
  string root_path = 1;
  string spec = 2;
  string description = 3;
  int32 num_objects = 4;
  google.protobuf.Timestamp indexed_at = 5;
}

message ListObjectsRequest {
  message Sort {
    enum Field {
      FIELD_UNSPECIFIED = 0;
      FIELD_ID = 1;
      FIELD_V1_CREATED = 2; // TODO
      FIELD_HEAD_CREATED = 3; // TODO
    }
    enum Order {
      ORDER_UNSPECIFIED = 0;
      ORDER_ASC = 1;
      ORDER_DESC = 2;
    }
    Field field = 1;
    Order order = 2;
  }
  string page_token = 1;
  int32 page_size = 2;
  Sort order_by = 3;
}

message ListObjectsResponse {
  message Object {
    string object_id = 1;
    string head = 2;
    google.protobuf.Timestamp v1_created = 3;
    google.protobuf.Timestamp head_created = 4;
  }
  repeated Object objects = 1;
  string next_page_token = 2;
}

message GetObjectRequest {
  string object_id = 1;
}

message GetObjectResponse {
  message Version {
    message User {
      string name = 1;
      string address = 2;
    }
    string num = 1;
    string message = 2;
    google.protobuf.Timestamp created = 3;
    optional User user = 4;
    int64 size = 5;
  }
  string object_id = 1;
  string spec = 2;
  string root_path = 3;
  string digest_algorithm = 4;
  repeated Version versions = 5;
}

message GetObjectStateRequest {
  // OCFL Object ID
  string object_id = 1;

  // object version number (e.g., v1)
  string version = 2;

  // a directory path in the version state
  string base_path = 3;

  // if recursive is true, response will include all files that are descendants
  // of the base_path (no directories are included).
  bool recursive = 4;
  
  // for paging through results
  string page_token = 5;
  // for paging through results
  int32 page_size = 6;
}

message GetObjectStateResponse {
  message Item {
    string name = 1;
    bool isdir = 2;
    int64 size = 3;
    string digest = 4;
  }

  // the digest for the base_path. (For directories, this is a recursive
  // checksum of the directory's contents)
  string digest = 1;
  
  // the base_path in the request is a directory
  bool isdir = 2;

  // size (file or directory contents)
  int64 size = 3;

  // list of items below the base path
  repeated Item children = 4;

  // token for next page of results
  string next_page_token = 5;
}

message GetContentRequest{
  string digest = 1;
}
message GetContentResponse{
  bytes data = 1;
}


