syntax = "proto3";

package ocfl.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/srerickson/ocfl-index/gen/ocfl/v1;ocflv1";

// IndexService is used to index and query OCFL objects in a repository.
service IndexService {
  // Get index status, counts, and storage root details
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse) {}

  // Start an asynchronous indexing process to scan the storage root and ingest
  // index inventories. Indexed objects not found during the storage root scan
  // are removed from the index. IndexAll returns immediately with a status
  // indicating whether the indexing process was started.
  rpc IndexAll(IndexAllRequest) returns (IndexAllResponse) {}

  // Index inventories for the specified object ids. Unlike IndexAll, IndexIDs
  //returns after the object ids have been indexed.
  rpc IndexIDs(IndexIDsRequest) returns (IndexIDsResponse) {}

  // List all objects in the index in lexigraphical order by ID.
  rpc ListObjects(ListObjectsRequest) returns (ListObjectsResponse) {}
  
  // Get details for a specific object in the index
  rpc GetObject(GetObjectRequest) returns (GetObjectResponse) {}
  
  // Query the logical state of an OCFL object version
  rpc GetObjectState(GetObjectStateRequest) returns (GetObjectStateResponse) {}

  // Stream log messages from indexing tasks
  rpc FollowLogs(FollowLogsRequest) returns (stream FollowLogsResponse) {}
}

message GetStatusRequest {}

message GetStatusResponse {
  string status = 1;
  string store_root_path = 2;
  string store_spec = 3;
  string store_description = 4;
  int32 num_object_paths = 5;
  int32 num_inventories = 6;
}

message IndexAllRequest{}

message IndexAllResponse {}

message IndexIDsRequest{
  repeated string object_ids = 1;
}

message IndexIDsResponse{}

message ListObjectsRequest {
  string page_token = 1;
  int32 page_size = 2;
}

message ListObjectsResponse {
  message Object {
    string object_id = 1;
    string head = 2;
    google.protobuf.Timestamp v1_created = 3;
    google.protobuf.Timestamp head_created = 4;
  }
  repeated Object objects = 1;
  string next_page_token = 2;
}

message GetObjectRequest {
  string object_id = 1;
}

message GetObjectResponse {
  message Version {
    message User {
      string name = 1;
      string address = 2;
    }
    string num = 1;
    string message = 2;
    google.protobuf.Timestamp created = 3;
    optional User user = 4;
    int64 size = 5;
    bool has_size = 6;
  }
  string object_id = 1;
  string spec = 2;
  string root_path = 3;
  string digest_algorithm = 4;
  repeated Version versions = 5;
  google.protobuf.Timestamp indexed_at = 6;
}

message GetObjectStateRequest {
  // OCFL Object ID
  string object_id = 1;

  // object version number (e.g., v1)
  string version = 2;

  // a directory path in the version state
  string base_path = 3;

  // if recursive is true, response will include all files that are descendants
  // of the base_path (no directories are included).
  bool recursive = 4;
  
  // for paging through results
  string page_token = 5;
  // for paging through results
  int32 page_size = 6;
}

message GetObjectStateResponse {
  message Item {
    string name = 1;
    bool isdir = 2;
    int64 size = 3;
    bool has_size = 4;
    string digest = 5;
  }

  // the digest for the base_path. (For directories, this is a recursive
  // checksum of the directory's contents)
  string digest = 1;
  
  // the base_path in the request is a directory
  bool isdir = 2;

  // size (file or directory contents)
  int64 size = 3;

  // version has size info
  bool has_size = 4;

  // list of items below the base path
  repeated Item children = 5;

  // token for next page of results
  string next_page_token = 6;
}

message FollowLogsRequest {}

message FollowLogsResponse{
  string message = 1;
}