// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: sqlc_queries.sql

package sqlc

import (
	"context"
	"time"
)

const countObjects = `-- name: CountObjects :one
SELECT COUNT(id) from ocfl_index_objects
`

func (q *Queries) CountObjects(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countObjects)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const debugAllNames = `-- name: DebugAllNames :many
SELECT node_id, name, parent_id FROM ocfl_index_names
`

func (q *Queries) DebugAllNames(ctx context.Context) ([]OcflIndexName, error) {
	rows, err := q.db.QueryContext(ctx, debugAllNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OcflIndexName
	for rows.Next() {
		var i OcflIndexName
		if err := rows.Scan(&i.NodeID, &i.Name, &i.ParentID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const debugAllNodes = `-- name: DebugAllNodes :many
SELECT id, dir, sum, size FROM ocfl_index_nodes
`

func (q *Queries) DebugAllNodes(ctx context.Context) ([]OcflIndexNode, error) {
	rows, err := q.db.QueryContext(ctx, debugAllNodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OcflIndexNode
	for rows.Next() {
		var i OcflIndexNode
		if err := rows.Scan(
			&i.ID,
			&i.Dir,
			&i.Sum,
			&i.Size,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const debugAllObjects = `-- name: DebugAllObjects :many
SELECT id, ocfl_id, spec, digest_algorithm, inventory_digest, root_path, head from ocfl_index_objects
`

func (q *Queries) DebugAllObjects(ctx context.Context) ([]OcflIndexObject, error) {
	rows, err := q.db.QueryContext(ctx, debugAllObjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OcflIndexObject
	for rows.Next() {
		var i OcflIndexObject
		if err := rows.Scan(
			&i.ID,
			&i.OcflID,
			&i.Spec,
			&i.DigestAlgorithm,
			&i.InventoryDigest,
			&i.RootPath,
			&i.Head,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const debugAllVersions = `-- name: DebugAllVersions :many
SELECT object_id, num, name, message, created, user_name, user_address, node_id from ocfl_index_object_versions
`

func (q *Queries) DebugAllVersions(ctx context.Context) ([]OcflIndexObjectVersion, error) {
	rows, err := q.db.QueryContext(ctx, debugAllVersions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OcflIndexObjectVersion
	for rows.Next() {
		var i OcflIndexObjectVersion
		if err := rows.Scan(
			&i.ObjectID,
			&i.Num,
			&i.Name,
			&i.Message,
			&i.Created,
			&i.UserName,
			&i.UserAddress,
			&i.NodeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteObject = `-- name: DeleteObject :exec
DELETE from ocfl_index_objects WHERE id = ?
`

func (q *Queries) DeleteObject(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteObject, id)
	return err
}

const deleteObjectVersions = `-- name: DeleteObjectVersions :exec
DELETE from ocfl_index_object_versions WHERE object_id = ?
`

func (q *Queries) DeleteObjectVersions(ctx context.Context, objectID int64) error {
	_, err := q.db.ExecContext(ctx, deleteObjectVersions, objectID)
	return err
}

const getContentPath = `-- name: GetContentPath :one
SELECT cont.file_path, objs.root_path from ocfl_index_content_paths cont
INNER JOIN ocfl_index_objects objs on cont.object_id = objs.id
INNER JOIN ocfl_index_nodes nodes on nodes.id = cont.node_id  AND nodes.dir IS FALSE
WHERE nodes.sum = ? LIMIT 1
`

type GetContentPathRow struct {
	FilePath string
	RootPath string
}

func (q *Queries) GetContentPath(ctx context.Context, sum []byte) (GetContentPathRow, error) {
	row := q.db.QueryRowContext(ctx, getContentPath, sum)
	var i GetContentPathRow
	err := row.Scan(&i.FilePath, &i.RootPath)
	return i, err
}

const getNodeSum = `-- name: GetNodeSum :one
SELECT id from ocfl_index_nodes WHERE sum = ? AND dir = ?
`

type GetNodeSumParams struct {
	Sum []byte
	Dir bool
}

func (q *Queries) GetNodeSum(ctx context.Context, arg GetNodeSumParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNodeSum, arg.Sum, arg.Dir)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getObjectID = `-- name: GetObjectID :one
SELECT id, ocfl_id, spec, digest_algorithm, inventory_digest, root_path, head FROM ocfl_index_objects WHERE ocfl_id = ?
`

func (q *Queries) GetObjectID(ctx context.Context, ocflID string) (OcflIndexObject, error) {
	row := q.db.QueryRowContext(ctx, getObjectID, ocflID)
	var i OcflIndexObject
	err := row.Scan(
		&i.ID,
		&i.OcflID,
		&i.Spec,
		&i.DigestAlgorithm,
		&i.InventoryDigest,
		&i.RootPath,
		&i.Head,
	)
	return i, err
}

const getObjectPath = `-- name: GetObjectPath :one
SELECT id, ocfl_id, spec, digest_algorithm, inventory_digest, root_path, head FROM ocfl_index_objects WHERE root_path = ?
`

func (q *Queries) GetObjectPath(ctx context.Context, rootPath string) (OcflIndexObject, error) {
	row := q.db.QueryRowContext(ctx, getObjectPath, rootPath)
	var i OcflIndexObject
	err := row.Scan(
		&i.ID,
		&i.OcflID,
		&i.Spec,
		&i.DigestAlgorithm,
		&i.InventoryDigest,
		&i.RootPath,
		&i.Head,
	)
	return i, err
}

const getObjectVersion = `-- name: GetObjectVersion :one
SELECT object_id, num, name, message, created, user_name, user_address, node_id from ocfl_index_object_versions WHERE object_id = ?1 and num = ?2
`

type GetObjectVersionParams struct {
	ObjectID int64
	Num      int64
}

func (q *Queries) GetObjectVersion(ctx context.Context, arg GetObjectVersionParams) (OcflIndexObjectVersion, error) {
	row := q.db.QueryRowContext(ctx, getObjectVersion, arg.ObjectID, arg.Num)
	var i OcflIndexObjectVersion
	err := row.Scan(
		&i.ObjectID,
		&i.Num,
		&i.Name,
		&i.Message,
		&i.Created,
		&i.UserName,
		&i.UserAddress,
		&i.NodeID,
	)
	return i, err
}

const getSchemaVersion = `-- name: GetSchemaVersion :one

SELECT major, minor FROM ocfl_index_schema LIMIT 1
`

// sqlc definitions
//
// Index Schema Version
func (q *Queries) GetSchemaVersion(ctx context.Context) (OcflIndexSchema, error) {
	row := q.db.QueryRowContext(ctx, getSchemaVersion)
	var i OcflIndexSchema
	err := row.Scan(&i.Major, &i.Minor)
	return i, err
}

const getStorageRoot = `-- name: GetStorageRoot :one
SELECT id, root_path, description, spec, indexed_at FROM ocfl_index_storage_root WHERE id = 1
`

func (q *Queries) GetStorageRoot(ctx context.Context) (OcflIndexStorageRoot, error) {
	row := q.db.QueryRowContext(ctx, getStorageRoot)
	var i OcflIndexStorageRoot
	err := row.Scan(
		&i.ID,
		&i.RootPath,
		&i.Description,
		&i.Spec,
		&i.IndexedAt,
	)
	return i, err
}

const insertContentPathIgnore = `-- name: InsertContentPathIgnore :exec
INSERT OR IGNORE INTO ocfl_index_content_paths (object_id, node_id, file_path) VALUES (
    ?,
    (SELECT id FROM ocfl_index_nodes WHERE sum = ? AND dir IS FALSE LIMIT 1),
    ?)
`

type InsertContentPathIgnoreParams struct {
	ObjectID int64
	Sum      []byte
	FilePath string
}

// Content Paths
func (q *Queries) InsertContentPathIgnore(ctx context.Context, arg InsertContentPathIgnoreParams) error {
	_, err := q.db.ExecContext(ctx, insertContentPathIgnore, arg.ObjectID, arg.Sum, arg.FilePath)
	return err
}

const insertNameIgnore = `-- name: InsertNameIgnore :exec
INSERT OR IGNORE INTO ocfl_index_names (name, node_id, parent_id) values (?,?,?)
`

type InsertNameIgnoreParams struct {
	Name     string
	NodeID   int64
	ParentID int64
}

// Names
func (q *Queries) InsertNameIgnore(ctx context.Context, arg InsertNameIgnoreParams) error {
	_, err := q.db.ExecContext(ctx, insertNameIgnore, arg.Name, arg.NodeID, arg.ParentID)
	return err
}

const insertNode = `-- name: InsertNode :execlastid
INSERT INTO ocfl_index_nodes (sum, dir, size) values (?, ?, ?)
`

type InsertNodeParams struct {
	Sum  []byte
	Dir  bool
	Size int64
}

// Nodes
func (q *Queries) InsertNode(ctx context.Context, arg InsertNodeParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertNode, arg.Sum, arg.Dir, arg.Size)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertObject = `-- name: InsertObject :execlastid
INSERT INTO ocfl_index_objects (
    ocfl_id, 
    spec, 
    digest_algorithm, 
    inventory_digest, 
    root_path, 
    head
    ) values (?, ?, ?, ?, ?, ?)
`

type InsertObjectParams struct {
	OcflID          string
	Spec            string
	DigestAlgorithm string
	InventoryDigest string
	RootPath        string
	Head            string
}

// OCFL Object
func (q *Queries) InsertObject(ctx context.Context, arg InsertObjectParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertObject,
		arg.OcflID,
		arg.Spec,
		arg.DigestAlgorithm,
		arg.InventoryDigest,
		arg.RootPath,
		arg.Head,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertObjectVersion = `-- name: InsertObjectVersion :execlastid
INSERT INTO ocfl_index_object_versions 
    (object_id, name, message, created, user_name, user_address, node_id, num)
    VALUES (?1,?2,?3,?4,?5,?6,?7, CAST(LTRIM(?2,'v') AS INT))
`

type InsertObjectVersionParams struct {
	ObjectID    int64
	Name        string
	Message     string
	Created     time.Time
	UserName    string
	UserAddress string
	NodeID      int64
}

// OCFL Object Versions
func (q *Queries) InsertObjectVersion(ctx context.Context, arg InsertObjectVersionParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertObjectVersion,
		arg.ObjectID,
		arg.Name,
		arg.Message,
		arg.Created,
		arg.UserName,
		arg.UserAddress,
		arg.NodeID,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const listObjectVersions = `-- name: ListObjectVersions :many
SELECT versions.object_id, versions.num, versions.name, versions.message, versions.created, versions.user_name, versions.user_address, versions.node_id, nodes.size size FROM ocfl_index_object_versions versions
INNER JOIN ocfl_index_nodes nodes ON nodes.id = versions.node_id
INNER JOIN ocfl_index_objects objects ON objects.id = versions.object_id
WHERE objects.ocfl_id = ? ORDER BY versions.num ASC
`

type ListObjectVersionsRow struct {
	ObjectID    int64
	Num         int64
	Name        string
	Message     string
	Created     time.Time
	UserName    string
	UserAddress string
	NodeID      int64
	Size        int64
}

func (q *Queries) ListObjectVersions(ctx context.Context, ocflID string) ([]ListObjectVersionsRow, error) {
	rows, err := q.db.QueryContext(ctx, listObjectVersions, ocflID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListObjectVersionsRow
	for rows.Next() {
		var i ListObjectVersionsRow
		if err := rows.Scan(
			&i.ObjectID,
			&i.Num,
			&i.Name,
			&i.Message,
			&i.Created,
			&i.UserName,
			&i.UserAddress,
			&i.NodeID,
			&i.Size,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const nodeDirChildren = `-- name: NodeDirChildren :many
SELECT child.id, names.name, child.dir, child.sum, child.size FROM ocfl_index_nodes child
INNER JOIN ocfl_index_names names ON child.id = names.node_id
WHERE names.parent_id = ?1 AND names.name > ?2 ORDER BY names.name ASC LIMIT ?3
`

type NodeDirChildrenParams struct {
	ParentID int64
	Name     string
	Limit    int64
}

type NodeDirChildrenRow struct {
	ID   int64
	Name string
	Dir  bool
	Sum  []byte
	Size int64
}

func (q *Queries) NodeDirChildren(ctx context.Context, arg NodeDirChildrenParams) ([]NodeDirChildrenRow, error) {
	rows, err := q.db.QueryContext(ctx, nodeDirChildren, arg.ParentID, arg.Name, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NodeDirChildrenRow
	for rows.Next() {
		var i NodeDirChildrenRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Dir,
			&i.Sum,
			&i.Size,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setStorageRoot = `-- name: SetStorageRoot :exec
UPDATE ocfl_index_storage_root SET 
    description = ?,
    root_path = ?,
    spec = ?
WHERE id = 1
`

type SetStorageRootParams struct {
	Description string
	RootPath    string
	Spec        string
}

// OCFL Storage Root
// table has only one row (id = 1).
func (q *Queries) SetStorageRoot(ctx context.Context, arg SetStorageRootParams) error {
	_, err := q.db.ExecContext(ctx, setStorageRoot, arg.Description, arg.RootPath, arg.Spec)
	return err
}

const setStorageRootIndexed = `-- name: SetStorageRootIndexed :exec
UPDATE ocfl_index_storage_root SET 
    indexed_at=DATETIME('now')
WHERE id = 1
`

func (q *Queries) SetStorageRootIndexed(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, setStorageRootIndexed)
	return err
}

const updateObject = `-- name: UpdateObject :exec
UPDATE ocfl_index_objects SET 
    spec = ?, 
    digest_algorithm = ?, 
    inventory_digest = ?, 
    root_path = ?,
    head = ?,
    ocfl_id = ?
    WHERE id = ?
`

type UpdateObjectParams struct {
	Spec            string
	DigestAlgorithm string
	InventoryDigest string
	RootPath        string
	Head            string
	OcflID          string
	ID              int64
}

func (q *Queries) UpdateObject(ctx context.Context, arg UpdateObjectParams) error {
	_, err := q.db.ExecContext(ctx, updateObject,
		arg.Spec,
		arg.DigestAlgorithm,
		arg.InventoryDigest,
		arg.RootPath,
		arg.Head,
		arg.OcflID,
		arg.ID,
	)
	return err
}
