// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: sqlc_queries.sql

package sqlc

import (
	"context"
	"time"
)

const deleteObject = `-- name: DeleteObject :exec
DELETE from ocfl_index_objects WHERE id = ?
`

func (q *Queries) DeleteObject(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteObject, id)
	return err
}

const deleteObjectVersions = `-- name: DeleteObjectVersions :exec
DELETE from ocfl_index_object_versions WHERE object_id = ?
`

func (q *Queries) DeleteObjectVersions(ctx context.Context, objectID int64) error {
	_, err := q.db.ExecContext(ctx, deleteObjectVersions, objectID)
	return err
}

const getContentPath = `-- name: GetContentPath :one
SELECT cont.file_path, objs.root_path from ocfl_index_content_paths cont
INNER JOIN ocfl_index_objects objs on cont.object_id = objs.id
INNER JOIN ocfl_index_nodes nodes on nodes.id = cont.node_id  AND nodes.dir IS FALSE
WHERE nodes.sum = ? LIMIT 1
`

type GetContentPathRow struct {
	FilePath string
	RootPath string
}

func (q *Queries) GetContentPath(ctx context.Context, sum []byte) (GetContentPathRow, error) {
	row := q.db.QueryRowContext(ctx, getContentPath, sum)
	var i GetContentPathRow
	err := row.Scan(&i.FilePath, &i.RootPath)
	return i, err
}

const getNodeSum = `-- name: GetNodeSum :one
SELECT id from ocfl_index_nodes WHERE sum = ? AND dir = ?
`

type GetNodeSumParams struct {
	Sum []byte
	Dir bool
}

func (q *Queries) GetNodeSum(ctx context.Context, arg GetNodeSumParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNodeSum, arg.Sum, arg.Dir)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getObjectID = `-- name: GetObjectID :one
SELECT id, ocfl_id, root_path, head, node_id FROM ocfl_index_objects WHERE ocfl_id = ?
`

func (q *Queries) GetObjectID(ctx context.Context, ocflID string) (OcflIndexObject, error) {
	row := q.db.QueryRowContext(ctx, getObjectID, ocflID)
	var i OcflIndexObject
	err := row.Scan(
		&i.ID,
		&i.OcflID,
		&i.RootPath,
		&i.Head,
		&i.NodeID,
	)
	return i, err
}

const getSchemaVersion = `-- name: GetSchemaVersion :one

SELECT major, minor FROM ocfl_index_schema LIMIT 1
`

// sqlc definitions
//
// Index Schema Version
func (q *Queries) GetSchemaVersion(ctx context.Context) (OcflIndexSchema, error) {
	row := q.db.QueryRowContext(ctx, getSchemaVersion)
	var i OcflIndexSchema
	err := row.Scan(&i.Major, &i.Minor)
	return i, err
}

const getStorageRootDescription = `-- name: GetStorageRootDescription :one
SELECT description FROM ocfl_index_storage_root WHERE id = 1
`

func (q *Queries) GetStorageRootDescription(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, getStorageRootDescription)
	var description string
	err := row.Scan(&description)
	return description, err
}

const insertContentPathIgnore = `-- name: InsertContentPathIgnore :exec
INSERT OR IGNORE INTO ocfl_index_content_paths (object_id, node_id, file_path) VALUES (
    ?,
    (SELECT id FROM ocfl_index_nodes WHERE sum = ? AND dir IS FALSE LIMIT 1),
    ?)
`

type InsertContentPathIgnoreParams struct {
	ObjectID int64
	Sum      []byte
	FilePath string
}

// Content Paths
func (q *Queries) InsertContentPathIgnore(ctx context.Context, arg InsertContentPathIgnoreParams) error {
	_, err := q.db.ExecContext(ctx, insertContentPathIgnore, arg.ObjectID, arg.Sum, arg.FilePath)
	return err
}

const insertNameIgnore = `-- name: InsertNameIgnore :exec
INSERT OR IGNORE INTO ocfl_index_names (name, node_id, parent_id) values (?,?,?)
`

type InsertNameIgnoreParams struct {
	Name     string
	NodeID   int64
	ParentID int64
}

// Names
func (q *Queries) InsertNameIgnore(ctx context.Context, arg InsertNameIgnoreParams) error {
	_, err := q.db.ExecContext(ctx, insertNameIgnore, arg.Name, arg.NodeID, arg.ParentID)
	return err
}

const insertNode = `-- name: InsertNode :execlastid
INSERT INTO ocfl_index_nodes (sum, dir) values (?, ?)
`

type InsertNodeParams struct {
	Sum []byte
	Dir bool
}

// Nodes
func (q *Queries) InsertNode(ctx context.Context, arg InsertNodeParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertNode, arg.Sum, arg.Dir)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertObject = `-- name: InsertObject :execlastid
INSERT INTO ocfl_index_objects (ocfl_id, root_path, node_id, head) values (?, ?, ?, ?)
`

type InsertObjectParams struct {
	OcflID   string
	RootPath string
	NodeID   int64
	Head     string
}

// OCFL Object
func (q *Queries) InsertObject(ctx context.Context, arg InsertObjectParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertObject,
		arg.OcflID,
		arg.RootPath,
		arg.NodeID,
		arg.Head,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const insertObjectVersion = `-- name: InsertObjectVersion :execlastid
INSERT INTO ocfl_index_object_versions 
    (object_id, num, name, message, created, user_name, user_address)
    VALUES (?,?,?,?,?,?,?)
`

type InsertObjectVersionParams struct {
	ObjectID    int64
	Num         int64
	Name        string
	Message     string
	Created     time.Time
	UserName    string
	UserAddress string
}

// OCFL Object Versions
func (q *Queries) InsertObjectVersion(ctx context.Context, arg InsertObjectVersionParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertObjectVersion,
		arg.ObjectID,
		arg.Num,
		arg.Name,
		arg.Message,
		arg.Created,
		arg.UserName,
		arg.UserAddress,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const listObjectVersions = `-- name: ListObjectVersions :many
SELECT versions.object_id, versions.num, versions.name, versions.message, versions.created, versions.user_name, versions.user_address, names.node_id node_id FROM ocfl_index_object_versions versions
INNER JOIN ocfl_index_objects objects ON objects.id = versions.object_id
INNER JOIN ocfl_index_names names ON names.parent_id = objects.node_id AND names.name = versions.name
WHERE objects.ocfl_id = ? ORDER BY versions.num ASC
`

type ListObjectVersionsRow struct {
	ObjectID    int64
	Num         int64
	Name        string
	Message     string
	Created     time.Time
	UserName    string
	UserAddress string
	NodeID      int64
}

func (q *Queries) ListObjectVersions(ctx context.Context, ocflID string) ([]ListObjectVersionsRow, error) {
	rows, err := q.db.QueryContext(ctx, listObjectVersions, ocflID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListObjectVersionsRow
	for rows.Next() {
		var i ListObjectVersionsRow
		if err := rows.Scan(
			&i.ObjectID,
			&i.Num,
			&i.Name,
			&i.Message,
			&i.Created,
			&i.UserName,
			&i.UserAddress,
			&i.NodeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listObjects = `-- name: ListObjects :many
SELECT 
    objects.id, 
    objects.ocfl_id,
    objects.head,
    versions.created version_created, 
    objects.node_id object_node_id,
    names.node_id head_node_id
FROM ocfl_index_objects objects
INNER JOIN ocfl_index_object_versions versions 
    ON objects.id = versions.object_id AND objects.head = versions.name
INNER JOIN ocfl_index_names names 
    ON names.parent_id = objects.node_id AND names.name = objects.head
ORDER BY versions.created DESC
`

type ListObjectsRow struct {
	ID       int64
	OcflID   string
	Head     string
	Created  time.Time
	NodeID   int64
	NodeID_2 int64
}

func (q *Queries) ListObjects(ctx context.Context) ([]ListObjectsRow, error) {
	rows, err := q.db.QueryContext(ctx, listObjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListObjectsRow
	for rows.Next() {
		var i ListObjectsRow
		if err := rows.Scan(
			&i.ID,
			&i.OcflID,
			&i.Head,
			&i.Created,
			&i.NodeID,
			&i.NodeID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const nodeDirChildren = `-- name: NodeDirChildren :many
SELECT child.id, names.name, child.dir, child.sum FROM ocfl_index_nodes child
INNER JOIN ocfl_index_names names ON child.id = names.node_id
WHERE names.parent_id = ? ORDER BY names.name ASC
`

type NodeDirChildrenRow struct {
	ID   int64
	Name string
	Dir  bool
	Sum  []byte
}

func (q *Queries) NodeDirChildren(ctx context.Context, parentID int64) ([]NodeDirChildrenRow, error) {
	rows, err := q.db.QueryContext(ctx, nodeDirChildren, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NodeDirChildrenRow
	for rows.Next() {
		var i NodeDirChildrenRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Dir,
			&i.Sum,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const nodeDirChildrenSum = `-- name: NodeDirChildrenSum :many
SELECT child.id, names.name, child.dir, child.sum FROM ocfl_index_nodes child
INNER JOIN ocfl_index_names names ON child.id = names.node_id
INNER JOIN ocfl_index_nodes parent on names.parent_id = parent.id
WHERE parent.sum = ? AND parent.dir is TRUE ORDER BY names.name ASC
`

type NodeDirChildrenSumRow struct {
	ID   int64
	Name string
	Dir  bool
	Sum  []byte
}

func (q *Queries) NodeDirChildrenSum(ctx context.Context, sum []byte) ([]NodeDirChildrenSumRow, error) {
	rows, err := q.db.QueryContext(ctx, nodeDirChildrenSum, sum)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NodeDirChildrenSumRow
	for rows.Next() {
		var i NodeDirChildrenSumRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Dir,
			&i.Sum,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setStorageRootDescription = `-- name: SetStorageRootDescription :exec
UPDATE ocfl_index_storage_root SET description = ? WHERE id = 1
`

// OCFL Storage Root
// table has only one row; its id = 1.
func (q *Queries) SetStorageRootDescription(ctx context.Context, description string) error {
	_, err := q.db.ExecContext(ctx, setStorageRootDescription, description)
	return err
}

const updateObject = `-- name: UpdateObject :exec
UPDATE ocfl_index_objects SET node_id = ?, head = ? WHERE id = ?
`

type UpdateObjectParams struct {
	NodeID int64
	Head   string
	ID     int64
}

func (q *Queries) UpdateObject(ctx context.Context, arg UpdateObjectParams) error {
	_, err := q.db.ExecContext(ctx, updateObject, arg.NodeID, arg.Head, arg.ID)
	return err
}
